{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSSL\\\\React\\\\demo\\\\Section 22 - Adv\\\\frontend\\\\src\\\\pages\\\\Events.js\";\nimport { Await } from 'react-router-dom';\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: () => /*#__PURE__*/_jsxDEV(EventsList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n  return /*#__PURE__*/_jsxDEV(EventsList, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n}\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch events.\"\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return {\n    events: loadEvents()\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Await","EventsList","jsxDEV","_jsxDEV","EventsPage","resolve","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","Response","JSON","stringify","message","status","loader","$RefreshReg$"],"sources":["D:/CSSL/React/demo/Section 22 - Adv/frontend/src/pages/Events.js"],"sourcesContent":["import { Await } from 'react-router-dom';\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  return <Await resolve={events}>\r\n    {() => <EventsList />}\r\n  </Await>\r\n  return <EventsList />;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\r\n      status: 500,\r\n    });\r\n\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n\r\nexport function loader() {\r\n  return {\r\n    events: loadEvents()\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,kBAAkB;AACxC,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EACpB,oBAAOD,OAAA,CAACH,KAAK;IAACK,OAAO,EAAEC,MAAO;IAAAC,QAAA,EAC3BA,CAAA,kBAAMJ,OAAA,CAACF,UAAU;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;EACR,oBAAOR,OAAA,CAACF,UAAU;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvB;AAACC,EAAA,GALQR,UAAU;AAOnB,eAAeA,UAAU;AAEzB,eAAeS,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC,EAAE;MACzEC,MAAM,EAAE;IACV,CAAC,CAAC;EAEJ,CAAC,MAAM;IACL,OAAOP,QAAQ;EACjB;AACF;AAEA,OAAO,SAASQ,MAAMA,CAAA,EAAG;EACvB,OAAO;IACLhB,MAAM,EAAEO,UAAU,CAAC;EACrB,CAAC;AACH;AAAC,IAAAD,EAAA;AAAAW,YAAA,CAAAX,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}